class Solution {
    void inorder(TreeNode* root, vector<int>& v){
        if(root==NULL){
            return ;
        }
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
public:

    // 2 pointer approach using only one loop.
    bool findTarget(TreeNode* root, int k) {
            vector<int> v;
            inorder(root,v);
            int sum=0;
            int i=0;
            int j=v.size()-1;
            while(i<j){
                sum=v[i]+v[j];
                if(sum==k){
                    return true;
                }
                else if(sum>k){
                    j--;
                }
                else if(sum<k){
                    i++;
                }
            }
            return false;
        }
    };

    // normal approach using 2 loops.
    bool findTarget(TreeNode* root, int k) {
        vector<int> v;
        inorder(root,v);
        int sum=0;
        for(int i=0;i<v.size()-1;i++){
            for(int j=i+1;j<v.size();j++){
                sum=v[i]+v[j];
                if(sum==k){
                    return true;
                }
            }
        }
        return false;
    }
};
