class Solution {
    void inorder(TreeNode* root, vector<int>& v){
        if(root==NULL){
            return ;
        }
        inorder(root->left,v);
        v.push_back(root->val);
        inorder(root->right,v);
    }
    TreeNode* createTree(int s, int e, vector<int>& v){
        if(s>e){
            return NULL;
        }
        int mid=s+(e-s)/2;
        TreeNode* root=new TreeNode(v[mid]);
        root->left=createTree(s,mid-1,v);
        root->right=createTree(mid+1,e,v);
        return root;
    }
public:
    TreeNode* balanceBST(TreeNode* root) {
        vector<int> v;
        inorder(root,v);
        // int s=0;
        // int e=v.size()-1;
        // TreeNode* newnode=new TreeNode(v[mid]);
        TreeNode* head=createTree(0,v.size()-1,v);
        return head;
    }
};
